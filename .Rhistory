knitr::opts_chunk$set(echo = TRUE)
tree <- read.newick("/home/chris/IENewickTree.txt")
library(ape)
library(phytools)
library(GGally)
library(tidyr)
library(plyr)
library(scales)
library(rstatix)
tree <- read.newick("/home/chris/IENewickTree.txt")
# choose the languages which are supposed to remain on the phylogeny
languages <- c("'Swedish [i-swe]'","'Dutch [i-nld]'","'Romanian [i-ron]'",
"'Italian  [i-ita]'","'German [i-deu]'", "'French [i-fra]'",
"'Spanish [i-spa]'", "'English [i-eng]'")
# prune the tree by dropping all other tips
pruned.tree <- drop.tip(tree, setdiff(tree$tip.label, languages))
# change tip labels
plot(pruned.tree)
sig2 = 0.01 # this variance setting is copied from Revell (2016)
# define number of BM simulations
nsim = 20
# set the seed for random number generation in order to get the same result
# when the code is re-run
set.seed(1)
# simulate Brownian motion on a tree with fastBM()
simulation <- fastBM(pruned.tree, mu = 0, sig2 = sig2, internal = F, nsim = nsim)
cor.plot <- ggpairs(simulation.df,
lower = list(continuous = wrap("smooth_loess", size = 1)),
upper = list(continuous = wrap('cor', method = "spearman"))) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
simulation.df <- as.data.frame(t(simulation))
# the t() function is transposing the rows and columns
cor.plot <- ggpairs(simulation.df,
lower = list(continuous = wrap("smooth_loess", size = 1)),
upper = list(continuous = wrap('cor', method = "spearman"))) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(cor.plot)
simulation.df <- as.data.frame(t(simulation))
# the t() function is transposing the rows and columns
cor.plot <- ggpairs(simulation.df,
lower = list(continuous = wrap("smooth_loess", size = 1)),
upper = list(continuous = wrap('cor', method = "spearman"))) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(cor.plot)
simulation.df <- as.data.frame(t(simulation))
# the t() function is transposing the rows and columns
cor.plot <- ggpairs(simulation.df,
lower = list(continuous = wrap("smooth_loess", size = 1)),
upper = list(continuous = wrap('cor', method = "spearman"))) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(cor.plot)
simulation.df <- as.data.frame(t(simulation))
# the t() function is transposing the rows and columns
cor.plot <- ggpairs(simulation.df,
lower = list(continuous = wrap("smooth_loess", size = 1)),
upper = list(continuous = wrap('cor', method = "spearman"))) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(cor.plot)
head(simulation.df)
simulation.df.long <- gather(simulation.df, key = language, value = value, 'Swedish [i-swe]':'Romanian [i-ron]')
colnames(simulation.df)
simulation.df(colnames) <- c("Swedish", "English", "Dutch", "German", "French", "Spanish", "Romanian")
colnames(simulation.df) <- c("Swedish", "English", "Dutch", "German", "French", "Spanish", "Romanian")
simulation.df
simulation.df.long <- gather(simulation.df, key = language, value = value, Swedish:Romanian)
head(simulation.df.long)
mu <- ddply(simulation.df.long, "language", summarise, grp.mean = mean(value, na.rm = T))
# get median values for each language
med <- ddply(simulation.df.long, "language", summarise, grp.median = median(value, na.rm = T))
# get standard deviation values for each language
sdev <- ddply(simulation.df.long, "language", summarise, grp.sd = sd(value, na.rm = T))
density.plot <- ggplot(simulation.df.long, aes(x = value)) +
# histograms could be added as well here (or instead of the density distributions)
# geom_histogram(aes(y = ..density..), colour = "white", fill = "light grey",
# binwidth = 0.1) +
geom_density(alpha = .2, fill = "grey", color = "darkgrey") +
geom_jitter(data = simulation.df.long, aes(x = value, y = 0),
size = 1, height = 0.1, width = 0) + # add some jitter to prevent overplotting
facet_wrap(~ language) +
# geom_vline(data = mu, aes(xintercept=grp.mean),
#          linetype = "dotted", color = "blue") +
geom_vline(data = med, aes(xintercept = grp.median),
linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = 0), linetype = "dotted") +
labs(x = "Pseudo-Complexity Value", y = "Density") +
xlim(-2, 2) +
theme_bw()
print(density.plot)
density.plot <- ggplot(simulation.df.long, aes(x = value)) +
# histograms could be added as well here (or instead of the density distributions)
# geom_histogram(aes(y = ..density..), colour = "white", fill = "light grey",
# binwidth = 0.1) +
geom_density(alpha = .2, fill = "grey", color = "darkgrey") +
geom_jitter(data = simulation.df.long, aes(x = value, y = 0),
size = 1, height = 0.1, width = 0) + # add some jitter to prevent overplotting
facet_wrap(~ language) +
# geom_vline(data = mu, aes(xintercept=grp.mean),
#          linetype = "dotted", color = "blue") +
geom_vline(data = med, aes(xintercept = grp.median),
linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = 0), linetype = "dotted") +
labs(x = "Pseudo-Complexity Value", y = "Density") +
xlim(-2, 2) +
theme_bw()
print(density.plot)
density.plot <- ggplot(simulation.df.long, aes(x = value)) +
# histograms could be added as well here (or instead of the density distributions)
# geom_histogram(aes(y = ..density..), colour = "white", fill = "light grey",
# binwidth = 0.1) +
geom_density(alpha = .2, fill = "grey", color = "darkgrey") +
geom_jitter(data = simulation.df.long, aes(x = value, y = 0),
size = 1, height = 0.1, width = 0) + # add some jitter to prevent overplotting
facet_wrap(~ language) +
# geom_vline(data = mu, aes(xintercept=grp.mean),
#          linetype = "dotted", color = "blue") +
geom_vline(data = med, aes(xintercept = grp.median),
linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = 0), linetype = "dotted") +
labs(x = "Pseudo-Complexity Value", y = "Density") +
xlim(-1, 1) +
theme_bw()
print(density.plot)
sig2 = 1 # this variance setting is copied from Revell (2016)
# define number of BM simulations
nsim = 20
# set the seed for random number generation in order to get the same result
# when the code is re-run
set.seed(1)
# simulate Brownian motion on a tree with fastBM()
simulation <- fastBM(pruned.tree, mu = 0, sig2 = sig2, internal = F, nsim = nsim)
simulation.df <- as.data.frame(t(simulation))
# the t() function is transposing the rows and columns
cor.plot <- ggpairs(simulation.df,
lower = list(continuous = wrap("smooth_loess", size = 1)),
upper = list(continuous = wrap('cor', method = "spearman"))) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(cor.plot)
colnames(simulation.df) <- c("Swedish", "English", "Dutch", "German", "French", "Spanish", "Romanian")
simulation.df.long <- gather(simulation.df, key = language, value = value, Swedish:Romanian)
head(simulation.df.long)
mu <- ddply(simulation.df.long, "language", summarise, grp.mean = mean(value, na.rm = T))
# get median values for each language
med <- ddply(simulation.df.long, "language", summarise, grp.median = median(value, na.rm = T))
# get standard deviation values for each language
sdev <- ddply(simulation.df.long, "language", summarise, grp.sd = sd(value, na.rm = T))
density.plot <- ggplot(simulation.df.long, aes(x = value)) +
# histograms could be added as well here (or instead of the density distributions)
# geom_histogram(aes(y = ..density..), colour = "white", fill = "light grey",
# binwidth = 0.1) +
geom_density(alpha = .2, fill = "grey", color = "darkgrey") +
geom_jitter(data = simulation.df.long, aes(x = value, y = 0),
size = 1, height = 0.1, width = 0) + # add some jitter to prevent overplotting
facet_wrap(~ language) +
# geom_vline(data = mu, aes(xintercept=grp.mean),
#          linetype = "dotted", color = "blue") +
geom_vline(data = med, aes(xintercept = grp.median),
linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = 0), linetype = "dotted") +
labs(x = "Pseudo-Complexity Value", y = "Density") +
xlim(-1, 1) +
theme_bw()
print(density.plot)
sig2 = 2 # this variance setting is 0.01 in Revell (2016)
# define number of BM simulations
nsim = 20
# set the seed for random number generation in order to get the same result
# when the code is re-run
set.seed(1)
# simulate Brownian motion on a tree with fastBM()
simulation <- fastBM(pruned.tree, mu = 0, sig2 = sig2, internal = F, nsim = nsim)
simulation.df <- as.data.frame(t(simulation))
# the t() function is transposing the rows and columns
cor.plot <- ggpairs(simulation.df,
lower = list(continuous = wrap("smooth_loess", size = 1)),
upper = list(continuous = wrap('cor', method = "spearman"))) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(cor.plot)
colnames(simulation.df) <- c("Swedish", "English", "Dutch", "German", "French", "Spanish", "Romanian")
simulation.df.long <- gather(simulation.df, key = language, value = value, Swedish:Romanian)
head(simulation.df.long)
mu <- ddply(simulation.df.long, "language", summarise, grp.mean = mean(value, na.rm = T))
# get median values for each language
med <- ddply(simulation.df.long, "language", summarise, grp.median = median(value, na.rm = T))
# get standard deviation values for each language
sdev <- ddply(simulation.df.long, "language", summarise, grp.sd = sd(value, na.rm = T))
density.plot <- ggplot(simulation.df.long, aes(x = value)) +
# histograms could be added as well here (or instead of the density distributions)
# geom_histogram(aes(y = ..density..), colour = "white", fill = "light grey",
# binwidth = 0.1) +
geom_density(alpha = .2, fill = "grey", color = "darkgrey") +
geom_jitter(data = simulation.df.long, aes(x = value, y = 0),
size = 1, height = 0.1, width = 0) + # add some jitter to prevent overplotting
facet_wrap(~ language) +
# geom_vline(data = mu, aes(xintercept=grp.mean),
#          linetype = "dotted", color = "blue") +
geom_vline(data = med, aes(xintercept = grp.median),
linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = 0), linetype = "dotted") +
labs(x = "Pseudo-Complexity Value", y = "Density") +
xlim(-2, 2) +
theme_bw()
print(density.plot)
tree <- read.newick("/home/chris/IENewickTree.txt")
# choose the languages which are supposed to remain on the phylogeny
languages <- c("'Swedish [i-swe]'","'Dutch [i-nld]'","'Romanian [i-ron]'",
"'Italian  [i-ita]'","'German [i-deu]'", "'French [i-fra]'",
"'Spanish [i-spa]'", "'English [i-eng]'")
# prune the tree by dropping all other tips
pruned.tree <- drop.tip(tree, setdiff(tree$tip.label, languages))
# change tip labels
plot(pruned.tree)
tree <- read.newick("/home/chris/IENewickTree.txt")
# choose the languages which are supposed to remain on the phylogeny
languages <- c("'Swedish [i-swe]'","'Dutch [i-nld]'","'Romanian [i-ron]'",
"'Italian  [i-ita]'","'German [i-deu]'", "'French [i-fra]'",
"'Spanish [i-spa]'", "'English [i-eng]'")
# prune the tree by dropping all other tips
pruned.tree <- drop.tip(tree, setdiff(tree$tip.label, languages))
# change tip labels
plot(pruned.tree)
plot(pruned.tree)
tree <- read.newick("/home/chris/IENewickTree.txt")
# choose the languages which are supposed to remain on the phylogeny
languages <- c("'Swedish [i-swe]'","'Dutch [i-nld]'","'Romanian [i-ron]'",
"'Italian  [i-ita]'","'German [i-deu]'", "'French [i-fra]'",
"'Spanish [i-spa]'", "'English [i-eng]'")
# prune the tree by dropping all other tips
pruned.tree <- drop.tip(tree, setdiff(tree$tip.label, languages))
# change tip labels
plot(pruned.tree)
sig2 = 2 # this variance setting is 0.01 in Revell (2016)
# define number of BM simulations
nsim = 20
# set the seed for random number generation in order to get the same result
# when the code is re-run
set.seed(09012020)
# simulate Brownian motion on a tree with fastBM()
simulation <- fastBM(pruned.tree, mu = 0, sig2 = sig2, internal = F, nsim = nsim)
simulation.df <- as.data.frame(t(simulation))
# the t() function is transposing the rows and columns
cor.plot <- ggpairs(simulation.df,
lower = list(continuous = wrap("smooth_loess", size = 1)),
upper = list(continuous = wrap('cor', method = "spearman"))) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(cor.plot)
simulation.df
tree <- read.newick("/home/chris/IENewickTree.txt")
# choose the languages which are supposed to remain on the phylogeny
languages <- c("'Swedish [i-swe]'","'Dutch [i-nld]'","'Romanian [i-ron]'",
"'Italian  [i-ita]'","'German [i-deu]'", "'French [i-fra]'",
"'Spanish [i-spa]'", "'English [i-eng]'")
# prune the tree by dropping all other tips
pruned.tree <- drop.tip(tree, setdiff(tree$tip.label, languages))
# change tip labels
plot(pruned.tree)
tree <- read.newick("/home/chris/IENewickTree.txt")
# choose the languages which are supposed to remain on the phylogeny
languages <- c("'Swedish [i-swe]'","'Dutch [i-nld]'","'Romanian [i-ron]'",
"'Italian [i-ita]'","'German [i-deu]'", "'French [i-fra]'",
"'Spanish [i-spa]'", "'English [i-eng]'")
# prune the tree by dropping all other tips
pruned.tree <- drop.tip(tree, setdiff(tree$tip.label, languages))
# change tip labels
plot(pruned.tree)
sig2 = 2 # this variance setting is 0.01 in Revell (2016)
# define number of BM simulations
nsim = 20
# set the seed for random number generation in order to get the same result
# when the code is re-run
set.seed(09012020)
# simulate Brownian motion on a tree with fastBM()
simulation <- fastBM(pruned.tree, mu = 0, sig2 = sig2, internal = F, nsim = nsim)
simulation.df <- as.data.frame(t(simulation))
# the t() function is transposing the rows and columns
cor.plot <- ggpairs(simulation.df,
lower = list(continuous = wrap("smooth_loess", size = 1)),
upper = list(continuous = wrap('cor', method = "spearman"))) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
print(cor.plot)
simulation.df
colnames(simulation.df) <- c("Swedish", "English", "Dutch", "German", "French", "Italian", "Spanish", "Romanian")
simulation.df.long <- gather(simulation.df, key = language, value = value, Swedish:Romanian)
head(simulation.df.long)
mu <- ddply(simulation.df.long, "language", summarise, grp.mean = mean(value, na.rm = T))
# get median values for each language
med <- ddply(simulation.df.long, "language", summarise, grp.median = median(value, na.rm = T))
# get standard deviation values for each language
sdev <- ddply(simulation.df.long, "language", summarise, grp.sd = sd(value, na.rm = T))
density.plot <- ggplot(simulation.df.long, aes(x = value)) +
# histograms could be added as well here (or instead of the density distributions)
# geom_histogram(aes(y = ..density..), colour = "white", fill = "light grey",
# binwidth = 0.1) +
geom_density(alpha = .2, fill = "grey", color = "darkgrey") +
geom_jitter(data = simulation.df.long, aes(x = value, y = 0),
size = 1, height = 0.1, width = 0) + # add some jitter to prevent overplotting
facet_wrap(~ language) +
# geom_vline(data = mu, aes(xintercept=grp.mean),
#          linetype = "dotted", color = "blue") +
geom_vline(data = med, aes(xintercept = grp.median),
linetype = "dashed", color = "red") +
geom_vline(aes(xintercept = 0), linetype = "dotted") +
labs(x = "Pseudo-Complexity Value", y = "Density") +
xlim(-2, 2) +
theme_bw()
print(density.plot)
stats.df <- cbind(mu, med[, 2], sdev[, 2])
colnames(stats.df) <- c("language", "mu", "med", "sdev")
stats.df.sorted <- stats.df[order(-stats.df$med), ]
# round values to two decimal places,  the "-1" excludes column 1
stats.df.sorted[, -1] <- round(stats.df.sorted[, -1], 2)
print(stats.df.sorted)
stats.df <- cbind(mu, med[, 2], sdev[, 2])
colnames(stats.df) <- c("language", "mu", "med", "sdev")
stats.df.sorted <- stats.df[order(-stats.df$language), ]
stats.df <- cbind(mu, med[, 2], sdev[, 2])
colnames(stats.df) <- c("language", "mu", "med", "sdev")
stats.df.sorted <- stats.df[order(stats.df$language), ]
# round values to two decimal places,  the "-1" excludes column 1
stats.df.sorted[, -1] <- round(stats.df.sorted[, -1], 2)
print(stats.df.sorted)
